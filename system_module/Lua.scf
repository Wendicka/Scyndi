module System

{ These are just functions "copied" from Lua }

import "string.char" function chr:string integer
import "os.exit" void Halt

var ReadIntError:string = "?Invalid input! Please redo from start!"

{func chr:string a:integer
	purecode "Lua","return string.char($C{AC$)"
end}

{ And these are just setup to make translated code properly connect to Lua }
void Write t:...string
	PureCode "Lua","for i,tx in scynipairs($C{T}C$) do\n\t\tio.write(tx)\n\t\tif i~=#$C{T}C$ then io.write(\" \") end\n\tend\n"
end

void WriteLn t:...string
	PureCode "Lua","for i,tx in scynipairs($C{T}C$) do\n\t\tio.write(tx)\n\t\tif i~=#$C{T}C$ then io.write(\" \") end\n\tend\n\tio.write(string.char(10))\n"
end


func ReadLn:String question:string
	write question
	purecode "Lua","return io.read('*l')" 
end

func ReadInt:integer question:string 
	write question
	purecode "Lua","
	repeat
		local sret = io.read('*l')
		local ret = sret:tonumber()
		if (not ret) or ret<math.floor(ret) or ret>math.floor(ret) then
			print($C{READINTERROR}C$)
		else
			return ret
		end
	until false
	"
end